import streamlit as st
from vnstock import Vnstock
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
try:
    from keras.models import Sequential
    from keras.layers import LSTM, Dense, Dropout
    KERAS_AVAILABLE = True
except ImportError:
    KERAS_AVAILABLE = False
    st.warning("Keras/TensorFlow ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ch·ª©c nƒÉng d·ª± ƒëo√°n LSTM s·∫Ω kh√¥ng kh·∫£ d·ª•ng.")

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="Ph√¢n t√≠ch C·ªï phi·∫øu Vi·ªát Nam",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ti√™u ƒë·ªÅ ch√≠nh
st.title("üìà Ph√¢n t√≠ch C·ªï phi·∫øu Vi·ªát Nam")
st.markdown("---")

# Sidebar ƒë·ªÉ c·∫•u h√¨nh
st.sidebar.header("C·∫•u h√¨nh")
symbol = st.sidebar.text_input("M√£ c·ªï phi·∫øu", value="ACB", help="Nh·∫≠p m√£ c·ªï phi·∫øu (VD: ACB, VCB, VHM)")
start_date = st.sidebar.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value=pd.to_datetime("2024-01-01"))
end_date = st.sidebar.date_input("Ng√†y k·∫øt th√∫c", value=pd.Timestamp.today())

# N√∫t ƒë·ªÉ t·∫£i d·ªØ li·ªáu
if st.sidebar.button("T·∫£i d·ªØ li·ªáu", type="primary"):
    st.session_state.load_data = True

# H√†m ƒë·ªÉ t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_data
def load_stock_data(symbol, start_date, end_date):
    try:
        stock = Vnstock().stock(symbol=symbol, source='VCI')
        df = stock.quote.history(start=start_date.strftime('%Y-%m-%d'), 
                                end=end_date.strftime('%Y-%m-%d'), 
                                interval='1D')
        return df, None
    except Exception as e:
        return None, str(e)

# Ki·ªÉm tra v√† t·∫£i d·ªØ li·ªáu
if 'load_data' not in st.session_state:
    st.session_state.load_data = True

if st.session_state.load_data:
    with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {symbol}..."):
        df, error = load_stock_data(symbol, start_date, end_date)
    
    if error:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {error}")
        st.stop()
    
    if df is None or df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu n√†y trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
        st.stop()
    
    # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng s·ªë ng√†y", len(df))
    
    with col2:
        latest_price = df['close'].iloc[-1]
        st.metric("Gi√° ƒë√≥ng c·ª≠a m·ªõi nh·∫•t", f"{latest_price:,.0f} VND")
    
    with col3:
        price_change = df['close'].iloc[-1] - df['close'].iloc[-2] if len(df) > 1 else 0
        change_percent = (price_change / df['close'].iloc[-2] * 100) if len(df) > 1 else 0
        st.metric("Thay ƒë·ªïi h√¥m nay", f"{price_change:,.0f} VND", f"{change_percent:.2f}%")
    
    with col4:
        avg_volume = df['volume'].mean()
        st.metric("Kh·ªëi l∆∞·ª£ng TB", f"{avg_volume:,.0f}")
    
    st.markdown("---")
    
    # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u
    with st.expander("üìä Xem d·ªØ li·ªáu chi ti·∫øt"):
        st.dataframe(df.head(10), use_container_width=True)
        st.write(f"**K√≠ch th∆∞·ªõc d·ªØ li·ªáu:** {df.shape[0]} h√†ng, {df.shape[1]} c·ªôt")
    
    # Bi·ªÉu ƒë·ªì k·∫øt h·ª£p (to√†n b·ªô chi·ªÅu r·ªông)
    st.subheader(f"üìà Ph√¢n t√≠ch t·ªïng h·ª£p {symbol}")
    fig_combined = make_subplots(
        rows=2, cols=1,
        shared_xaxes=True,
        vertical_spacing=0.05,
        subplot_titles=(f'Gi√° c·ªï phi·∫øu {symbol}', 'Kh·ªëi l∆∞·ª£ng giao d·ªãch'),
        row_heights=[0.7, 0.3]
    )
    
    # Th√™m bi·ªÉu ƒë·ªì n·∫øn
    fig_combined.add_trace(
        go.Candlestick(
            x=df.index,
            open=df['open'],
            high=df['high'],
            low=df['low'],
            close=df['close'],
            name=symbol
        ),
        row=1, col=1
    )
    
    # Th√™m bi·ªÉu ƒë·ªì volume
    fig_combined.add_trace(
        go.Bar(
            x=df.index,
            y=df['volume'],
            name='Volume',
            marker_color='lightblue'
        ),
        row=2, col=1
    )
    
    fig_combined.update_layout(
        title=f'Ph√¢n t√≠ch c·ªï phi·∫øu {symbol}',
        xaxis_rangeslider_visible=False,
        height=800,
        showlegend=False
    )
    
    fig_combined.update_xaxes(title_text="Ng√†y", row=2, col=1)
    fig_combined.update_yaxes(title_text="Gi√° (VND)", row=1, col=1)
    fig_combined.update_yaxes(title_text="Kh·ªëi l∆∞·ª£ng", row=2, col=1)
    
    st.plotly_chart(fig_combined, use_container_width=True)

    # Ph√¢n t√≠ch th·ªëng k√™
    st.markdown("---")
    st.subheader("üìã Th·ªëng k√™ m√¥ t·∫£")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Th·ªëng k√™ gi√°:**")
        price_stats = df[['open', 'high', 'low', 'close']].describe()
        st.dataframe(price_stats, use_container_width=True)
    
    with col2:
        st.write("**Th·ªëng k√™ kh·ªëi l∆∞·ª£ng:**")
        volume_stats = df[['volume']].describe()
        st.dataframe(volume_stats, use_container_width=True)
    
    # LSTM Price Prediction Section
    st.markdown("---")
    st.subheader("ü§ñ D·ª± ƒëo√°n gi√° s·ª≠ d·ª•ng LSTM")
    
    if KERAS_AVAILABLE:
        # Th√™m checkbox ƒë·ªÉ cho ph√©p ng∆∞·ªùi d√πng ch·ªçn c√≥ ch·∫°y d·ª± ƒëo√°n hay kh√¥ng
        if st.checkbox("Ch·∫°y m√¥ h√¨nh d·ª± ƒëo√°n LSTM", value=False, help="C√≥ th·ªÉ m·∫•t v√†i ph√∫t ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh"):
            
            # H√†m t·∫°o d·ªØ li·ªáu cho LSTM
            @st.cache_data
            def prepare_lstm_data(data, lookback=60):
                scaler = MinMaxScaler()
                scaled_data = scaler.fit_transform(data[['close']].values)
                
                X, y = [], []
                for i in range(lookback, len(scaled_data)):
                    X.append(scaled_data[i - lookback:i, 0])
                    y.append(scaled_data[i, 0])
                
                X, y = np.array(X), np.array(y)
                X = X.reshape((X.shape[0], X.shape[1], 1))
                
                return X, y, scaler
            
            # H√†m t·∫°o v√† hu·∫•n luy·ªán m√¥ h√¨nh LSTM
            def create_lstm_model(X, y):
                model = Sequential()
                model.add(LSTM(64, return_sequences=True, input_shape=(X.shape[1], 1)))
                model.add(Dropout(0.2))
                model.add(LSTM(64))
                model.add(Dropout(0.2))
                model.add(Dense(1))
                
                model.compile(optimizer='adam', loss='mean_squared_error')
                return model
            
            with st.spinner("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu v√† hu·∫•n luy·ªán m√¥ h√¨nh LSTM..."):
                try:
                    # Chu·∫©n b·ªã d·ªØ li·ªáu
                    lookback = 60
                    if len(df) < lookback + 30:
                        st.warning(f"C·∫ßn √≠t nh·∫•t {lookback + 30} ng√†y d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh LSTM. Hi·ªán t·∫°i ch·ªâ c√≥ {len(df)} ng√†y.")
                    else:
                        X, y, scaler = prepare_lstm_data(df, lookback)
                        
                        # T·∫°o v√† hu·∫•n luy·ªán m√¥ h√¨nh
                        model = create_lstm_model(X, y)
                        
                        # Progress bar cho qu√° tr√¨nh hu·∫•n luy·ªán
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        epochs = 20
                        batch_size = 32
                        
                        # Hu·∫•n luy·ªán v·ªõi callback ƒë·ªÉ c·∫≠p nh·∫≠t progress
                        for epoch in range(epochs):
                            status_text.text(f'Epoch {epoch + 1}/{epochs}')
                            model.fit(X, y, epochs=1, batch_size=batch_size)
                            progress_bar.progress((epoch + 1) / epochs)
                        
                        status_text.text('Ho√†n th√†nh hu·∫•n luy·ªán!')
                        
                        # D·ª± ƒëo√°n
                        predicted = model.predict(X)
                        predicted_prices = scaler.inverse_transform(predicted)
                        real_prices = scaler.inverse_transform(y.reshape(-1, 1))
                        
                        # Debug: Ki·ªÉm tra d·ªØ li·ªáu
                        st.write(f"**Debug info:**")
                        st.write(f"- Shape predicted_prices: {predicted_prices.shape}")
                        st.write(f"- Shape real_prices: {real_prices.shape}")
                        st.write(f"- Min predicted: {np.min(predicted_prices):,.2f}")
                        st.write(f"- Max predicted: {np.max(predicted_prices):,.2f}")
                        st.write(f"- Min real: {np.min(real_prices):,.2f}")
                        st.write(f"- Max real: {np.max(real_prices):,.2f}")
                        
                        # T·∫°o index cho d·ªØ li·ªáu d·ª± ƒëo√°n (b·ªè qua lookback ng√†y ƒë·∫ßu)
                        prediction_dates = df.index[lookback:]
                        
                        # T·∫°o DataFrame cho d·ªØ li·ªáu d·ª± ƒëo√°n
                        prediction_df = pd.DataFrame({
                            'date': prediction_dates,
                            'actual': real_prices.flatten(),
                            'predicted': predicted_prices.flatten()
                        })
                        
                        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì so s√°nh
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.subheader("üìä So s√°nh Th·ª±c t·∫ø vs D·ª± ƒëo√°n")
                            fig_comparison = go.Figure()
                            
                            fig_comparison.add_trace(go.Scatter(
                                x=prediction_df['date'],
                                y=prediction_df['actual'],
                                mode='lines',
                                name='Gi√° th·ª±c t·∫ø',
                                line=dict(color='blue')
                            ))
                            
                            fig_comparison.add_trace(go.Scatter(
                                x=prediction_df['date'],
                                y=prediction_df['predicted'],
                                mode='lines',
                                name='Gi√° d·ª± ƒëo√°n',
                                line=dict(color='red', dash='dash')
                            ))
                            
                            fig_comparison.update_layout(
                                title='So s√°nh Gi√° th·ª±c t·∫ø vs D·ª± ƒëo√°n',
                                xaxis_title='Ng√†y',
                                yaxis_title='Gi√° (VND)',
                                height=400
                            )
                            
                            st.plotly_chart(fig_comparison, use_container_width=True)
                        
                        with col2:
                            st.subheader("üìà T√≠n hi·ªáu Mua/B√°n")
                            
                            # T·∫°o t√≠n hi·ªáu mua/b√°n
                            signals = []
                            for i in range(1, len(predicted_prices)):
                                if predicted_prices[i] > predicted_prices[i - 1]:
                                    signals.append('Mua')
                                else:
                                    signals.append('B√°n')
                            
                            # Hi·ªÉn th·ªã t√≠n hi·ªáu cu·ªëi c√πng
                            latest_signal = signals[-1] if signals else "Kh√¥ng x√°c ƒë·ªãnh"
                            signal_color = "green" if latest_signal == "Mua" else "red"
                            
                            st.markdown(f"""
                            <div style="background-color: {signal_color}; color: white; padding: 20px; border-radius: 10px; text-align: center;">
                                <h3>T√≠n hi·ªáu m·ªõi nh·∫•t: {latest_signal}</h3>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Hi·ªÉn th·ªã th·ªëng k√™ ƒë·ªô ch√≠nh x√°c
                            # ƒê·∫£m b·∫£o d·ªØ li·ªáu c√≥ c√πng shape v√† lo·∫°i b·ªè gi√° tr·ªã NaN
                            real_flat = real_prices.flatten()
                            pred_flat = predicted_prices.flatten()
                            
                            # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN ho·∫∑c inf
                            valid_indices = ~(np.isnan(real_flat) | np.isnan(pred_flat) | 
                                            np.isinf(real_flat) | np.isinf(pred_flat))
                            real_clean = real_flat[valid_indices]
                            pred_clean = pred_flat[valid_indices]
                            
                            if len(real_clean) > 0:
                                # T√≠nh to√°n metrics
                                mse = np.mean((real_clean - pred_clean) ** 2)
                                rmse = np.sqrt(mse)
                                mae = np.mean(np.abs(real_clean - pred_clean))
                                
                                # T√≠nh percentage accuracy (MAPE - Mean Absolute Percentage Error)
                                mape = np.mean(np.abs((real_clean - pred_clean) / real_clean)) * 100
                                
                                st.write("**Th·ªëng k√™ ƒë·ªô ch√≠nh x√°c:**")
                                st.write(f"- RMSE: {rmse:,.2f} VND")
                                st.write(f"- MAE: {mae:,.2f} VND")
                                st.write(f"- MAPE: {mape:.2f}%")
                                st.write(f"- ƒê·ªô ch√≠nh x√°c: {100 - mape:.2f}%")
                            else:
                                st.write("**Th·ªëng k√™ ƒë·ªô ch√≠nh x√°c:**")
                                st.write("- Kh√¥ng th·ªÉ t√≠nh to√°n do d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
                            
                            # Hi·ªÉn th·ªã distribution c·ªßa t√≠n hi·ªáu
                            signal_counts = pd.Series(signals).value_counts()
                            fig_signals = px.pie(
                                values=signal_counts.values,
                                names=signal_counts.index,
                                title="Ph√¢n b·ªï t√≠n hi·ªáu Mua/B√°n"
                            )
                            st.plotly_chart(fig_signals, use_container_width=True)
                        
                        # Hi·ªÉn th·ªã b·∫£ng d·ª± ƒëo√°n m·ªõi nh·∫•t
                        st.subheader("üìã D·ª± ƒëo√°n 10 ng√†y g·∫ßn nh·∫•t")
                        recent_predictions = prediction_df.tail(10).copy()
                        recent_predictions['difference'] = recent_predictions['predicted'] - recent_predictions['actual']
                        
                        # T√≠nh ƒë·ªô ch√≠nh x√°c v·ªõi x·ª≠ l√Ω tr∆∞·ªùng h·ª£p chia cho 0
                        def calculate_accuracy(actual, predicted):
                            if actual == 0:
                                return 0
                            return max(0, (1 - abs(predicted - actual) / abs(actual)) * 100)
                        
                        recent_predictions['accuracy'] = recent_predictions.apply(
                            lambda row: calculate_accuracy(row['actual'], row['predicted']), axis=1
                        )
                        
                        # Sao l∆∞u d·ªØ li·ªáu s·ªë cho t√≠nh to√°n
                        actual_backup = recent_predictions['actual'].copy()
                        predicted_backup = recent_predictions['predicted'].copy()
                        difference_backup = recent_predictions['difference'].copy()
                        accuracy_backup = recent_predictions['accuracy'].copy()
                        
                        # Format hi·ªÉn th·ªã
                        recent_predictions['actual'] = actual_backup.apply(lambda x: f"{x:,.0f}")
                        recent_predictions['predicted'] = predicted_backup.apply(lambda x: f"{x:,.0f}")
                        recent_predictions['difference'] = difference_backup.apply(lambda x: f"{x:+,.0f}")
                        recent_predictions['accuracy'] = accuracy_backup.apply(lambda x: f"{x:.1f}%")
                        
                        recent_predictions.columns = ['Ng√†y', 'Gi√° th·ª±c t·∫ø (VND)', 'Gi√° d·ª± ƒëo√°n (VND)', 'Ch√™nh l·ªách (VND)', 'ƒê·ªô ch√≠nh x√°c']
                        st.dataframe(recent_predictions, use_container_width=True)
                        
                except Exception as e:
                    st.error(f"L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh LSTM: {str(e)}")
                    st.info("H√£y th·ª≠ l·∫°i v·ªõi kho·∫£ng th·ªùi gian d·ªØ li·ªáu d√†i h∆°n.")
    else:
        st.info("ƒê·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng d·ª± ƒëo√°n LSTM, vui l√≤ng c√†i ƒë·∫∑t TensorFlow/Keras:")
        st.code("pip install tensorflow", language="bash")

else:
    # Hi·ªÉn th·ªã khi ch∆∞a t·∫£i d·ªØ li·ªáu
    st.info("üëà H√£y c·∫•u h√¨nh th√¥ng tin ·ªü sidebar v√† nh·∫•n 'T·∫£i d·ªØ li·ªáu' ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch!")
    
    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    st.markdown("""
    ## üöÄ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    
    1. **Nh·∫≠p m√£ c·ªï phi·∫øu** trong sidebar (VD: ACB, VCB, VHM, FPT, v.v.)
    2. **Ch·ªçn kho·∫£ng th·ªùi gian** ph√¢n t√≠ch
    3. **Nh·∫•n n√∫t "T·∫£i d·ªØ li·ªáu"** ƒë·ªÉ xem bi·ªÉu ƒë·ªì
    
    ## üìä C√°c bi·ªÉu ƒë·ªì s·∫Ω hi·ªÉn th·ªã:
    - **Bi·ªÉu ƒë·ªì n·∫øn (Candlestick)**: Hi·ªÉn th·ªã gi√° m·ªü, ƒë√≥ng, cao, th·∫•p
    - **Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng**: Hi·ªÉn th·ªã kh·ªëi l∆∞·ª£ng giao d·ªãch
    - **Bi·ªÉu ƒë·ªì t·ªïng h·ª£p**: K·∫øt h·ª£p gi√° v√† kh·ªëi l∆∞·ª£ng
    - **Bi·ªÉu ƒë·ªì xu h∆∞·ªõng**: ƒê∆∞·ªùng gi√° ƒë√≥ng c·ª≠a
    - **Th·ªëng k√™ m√¥ t·∫£**: C√°c ch·ªâ s·ªë th·ªëng k√™ chi ti·∫øt
    """)
