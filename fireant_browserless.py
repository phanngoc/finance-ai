import asyncio
import streamlit as st
import pandas as pd
from datetime import datetime
from playwright.async_api import async_playwright
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import openai
import base64
import io
from PIL import Image
import os
import uuid
import tempfile
from dotenv import load_dotenv
from utils import DoclingProcessor
import os
# Load environment variables from .env file
load_dotenv()

class FireantBrowserlessScraper:
    def __init__(self, browserless_url=None, base_url=None):
        # Load configuration from environment variables
        self.browserless_url = browserless_url or os.getenv("BROWSERLESS_URL", "ws://localhost:3000")
        self.base_url = base_url or os.getenv("FIREANT_BASE_URL", "https://fireant.vn")
        
        # Data storage directories
        self.data_dir = os.getenv("DATA_DIR", "data")
        self.screenshots_dir = os.getenv("SCREENSHOTS_DIR", "data/screenshots")
        self.analysis_dir = os.getenv("ANALYSIS_DIR", "data/analysis")
        self.complete_analysis_dir = os.getenv("COMPLETE_ANALYSIS_DIR", "data/complete_analysis")
        
        # Create directories if they don't exist
        os.makedirs(self.screenshots_dir, exist_ok=True)
        os.makedirs(self.analysis_dir, exist_ok=True)
        os.makedirs(self.complete_analysis_dir, exist_ok=True)
    
    def create_env_file(self):
        """
        T·∫°o file .env t·ª´ template n·∫øu ch∆∞a t·ªìn t·∫°i
        """
        import streamlit as st
        
        env_file = ".env"
        env_example = "env.example"
        
        if not os.path.exists(env_file) and os.path.exists(env_example):
            try:
                # Copy t·ª´ env.example sang .env
                import shutil
                shutil.copy(env_example, env_file)
                st.success(f"‚úÖ ƒê√£ t·∫°o file {env_file} t·ª´ {env_example}")
                st.info("üí° H√£y ch·ªânh s·ª≠a file .env v·ªõi API key c·ªßa b·∫°n")
                return True
            except Exception as e:
                st.error(f"‚ùå L·ªói khi t·∫°o file .env: {str(e)}")
                return False
        elif os.path.exists(env_file):
            st.info(f"‚úÖ File {env_file} ƒë√£ t·ªìn t·∫°i")
            return True
        else:
            st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {env_example}")
            return False

    async def _handle_popups(self, page):
        """
        X·ª≠ l√Ω v√† ƒë√≥ng c√°c popup tr∆∞·ªõc khi ch·ª•p screenshot
        
        Args:
            page: Playwright page object
        """
        try:
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ popup c√≥ th·ªÉ xu·∫•t hi·ªán
            await page.wait_for_timeout(1000)
            
            # X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho FireAnt notification popup
            await page.evaluate("""
                () => {
                    // T√¨m v√† x·ª≠ l√Ω FireAnt notification dialog
                    const fireantDialogs = document.querySelectorAll('div[role="dialog"][data-state="open"]');
                    fireantDialogs.forEach(dialog => {
                        const header = dialog.querySelector('h2');
                        if (header && header.textContent.includes('Nh·∫≠n th√¥ng b√°o')) {
                            // T√¨m n√∫t "ƒê·ªÉ sau"
                            const buttons = dialog.querySelectorAll('button');
                            let clicked = false;
                            
                            buttons.forEach(btn => {
                                const text = btn.textContent.toLowerCase();
                                if (text.includes('ƒë·ªÉ sau') || text.includes('sau')) {
                                    btn.click();
                                    clicked = true;
                                }
                            });
                            
                            // N·∫øu kh√¥ng t√¨m th·∫•y n√∫t "ƒê·ªÉ sau", th·ª≠ click n√∫t X
                            if (!clicked) {
                                const closeBtn = dialog.querySelector('button[type="button"] svg');
                                if (closeBtn) {
                                    closeBtn.closest('button').click();
                                    clicked = true;
                                }
                            }
                            
                            // N·∫øu v·∫´n kh√¥ng click ƒë∆∞·ª£c, ·∫©n dialog
                            if (!clicked) {
                                dialog.style.display = 'none';
                                dialog.style.visibility = 'hidden';
                                dialog.style.opacity = '0';
                                dialog.style.zIndex = '-9999';
                                dialog.style.pointerEvents = 'none';
                            }
                        }
                    });
                }
            """)

            # ƒê·ª£i th√™m m·ªôt ch√∫t ƒë·ªÉ c√°c thay ƒë·ªïi c√≥ hi·ªáu l·ª±c
            await page.wait_for_timeout(500)
            
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω popup: {str(e)}")

    async def _smart_scroll_and_capture(self, page, symbol, page_type="general"):
        """
        Scroll th√™m 1 b∆∞·ªõc b·∫±ng ƒë·ªô cao m√†n h√¨nh hi·ªán t·∫°i, ch·ª•p ·∫£nh v√† l∆∞u th√†nh file temp
        
        Args:
            page: Playwright page object
            symbol: M√£ ch·ª©ng kho√°n
            page_type: Lo·∫°i trang ("general", "financial", "chart")
            
        Returns:
            str: T√™n file temp ƒë√£ l∆∞u
        """
        try:
            # L·∫•y k√≠ch th∆∞·ªõc viewport hi·ªán t·∫°i
            viewport = await page.viewport_size()
            screen_height = viewport['height']
            
            # Scroll th√™m 1 b∆∞·ªõc b·∫±ng ƒë·ªô cao m√†n h√¨nh
            await page.evaluate(f"""
                () => {{
                    window.scrollBy(0, {screen_height});
                }}
            """)
            
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ trang load sau khi scroll
            await page.wait_for_timeout(1000)
            
            # Ch·ª•p ·∫£nh to√†n trang sau khi scroll
            screenshot = await page.screenshot(full_page=True)
            
            # T·∫°o UUID ƒë·ªÉ ƒë·ªãnh danh file
            file_uuid = str(uuid.uuid4())
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # T·∫°o t√™n file temp v·ªõi UUID
            temp_filename = f"temp_{symbol}_{page_type}_{timestamp}_{file_uuid}.png"
            temp_filepath = os.path.join(tempfile.gettempdir(), temp_filename)
            
            # L∆∞u screenshot v√†o file temp
            with open(temp_filepath, "wb") as f:
                f.write(screenshot)
            
            return temp_filepath
            
        except Exception as e:
            st.error(f"‚ùå L·ªói khi scroll v√† ch·ª•p ·∫£nh: {str(e)}")
            return None
    
    async def _click_financial_tab_and_capture(self, page, symbol):
        """
        Click v√†o tab "T√†i ch√≠nh" v√† ch·ª•p ·∫£nh chart
        
        Args:
            page: Playwright page object
            symbol: M√£ ch·ª©ng kho√°n
            
        Returns:
            tuple: (screenshot, success_status)
        """
        try:
            # ƒê·ª£i trang load ho√†n to√†n
            await page.wait_for_timeout(2000)
            
            # T√¨m v√† click v√†o button "T√†i ch√≠nh"
            financial_button = await page.query_selector('button:has-text("T√†i ch√≠nh")')
            if financial_button:
                await financial_button.click()
                st.success("‚úÖ ƒê√£ click v√†o tab 'T√†i ch√≠nh'")
                
                # ƒê·ª£i trang load sau khi click
                await page.wait_for_timeout(3000)
                
                # Scroll ƒë·ªÉ load t·∫•t c·∫£ chart
                await page.evaluate("""
                    () => {
                        window.scrollTo(0, document.body.scrollHeight);
                        setTimeout(() => {
                            window.scrollTo(0, 0);
                        }, 1000);
                    }
                """)
                
                # Ch·ª•p ·∫£nh to√†n trang
                screenshot = await page.screenshot()
                return screenshot, True
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y button 'T√†i ch√≠nh'")
                return None, False
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi click tab T√†i ch√≠nh: {str(e)}")
            return None, False

    def save_financial_analysis(self, analysis_text, symbol):
        """
        L∆∞u ph√¢n t√≠ch t√†i ch√≠nh v√†o file markdown
        
        Args:
            analysis_text: N·ªôi dung ph√¢n t√≠ch t·ª´ OpenAI
            symbol: M√£ ch·ª©ng kho√°n
        """
        try:
            # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            save_dir = f"{self.analysis_dir}/{symbol}_{timestamp}"
            os.makedirs(save_dir, exist_ok=True)
            
            # L∆∞u file markdown
            filename = f"{save_dir}/financial_analysis.md"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(analysis_text)
            
            return filename
            
        except Exception as e:
            st.error(f"‚ùå L·ªói khi l∆∞u ph√¢n t√≠ch: {str(e)}")
            return None

    async def get_stock_info_browserless(self, symbol):
        """S·ª≠ d·ª•ng Browserless ƒë·ªÉ l·∫•y th√¥ng tin ch·ª©ng kho√°n"""
        try:
            async with async_playwright() as p:
                # K·∫øt n·ªëi ƒë·∫øn Browserless
                browser = await p.chromium.connect_over_cdp(self.browserless_url)
                page = await browser.new_page()
                
                # C·∫•u h√¨nh viewport
                await page.set_viewport_size({"width": 1920, "height": 1080})
                
                # Truy c·∫≠p trang Fireant
                url = f"{self.base_url}/ma-chung-khoan/{symbol}"
                await page.goto(url, wait_until="networkidle")
                
                # X·ª≠ l√Ω popup ngay sau khi trang load xong
                await self._handle_popups(page)

                # L·∫•y th√¥ng tin c∆° b·∫£n t·ª´ b·∫£ng t√†i ch√≠nh sau khi ƒë√£ scroll
                stock_data = await page.evaluate("""
                    () => {
                        const data = {};
                        
                        // L·∫•y t√™n c√¥ng ty t·ª´ header m·ªõi
                        const companyNameHeader = document.querySelector('div.sticky.z-50.mb-1.bg-white');
                        if (companyNameHeader) {
                            data.company_name = companyNameHeader.textContent.trim();
                        } else {
                            // Fallback cho c√°c selector c≈©
                            const companyName = document.querySelector('h1, .company-name, .stock-name, .symbol-name');
                            data.company_name = companyName ? companyName.textContent.trim() : 'Kh√¥ng t√¨m th·∫•y';
                        }
                        
                        // L·∫•y m√£ ch·ª©ng kho√°n v√† s√†n t·ª´ header m·ªõi
                        const symbolElement = document.querySelector('div.sticky.z-50.mb-1.bg-white');
                        if (symbolElement) {
                            const symbolText = symbolElement.textContent.trim();
                            // T√°ch m√£ v√† s√†n (v√≠ d·ª•: "TCB:HSX")
                            const parts = symbolText.split(':');
                            if (parts.length >= 2) {
                                data.symbol_code = parts[0].trim();
                                data.exchange = parts[1].trim();
                            } else {
                                data.symbol_code = symbolText;
                                data.exchange = 'N/A';
                            }
                        }
                        
                        // L·∫•y gi√° hi·ªán t·∫°i t·ª´ header m·ªõi
                        const currentPriceElement = document.querySelector('div.sticky.z-50.mb-1.bg-white span');
                        if (currentPriceElement) {
                            data.current_price = currentPriceElement.textContent.trim();
                        } else {
                            // Fallback cho c√°c selector c≈©
                            const currentPrice = document.querySelector('.current-price, .price, [data-price], .stock-price, .text-lg.font-bold');
                            data.current_price = currentPrice ? currentPrice.textContent.trim() : 'N/A';
                        }
                        
                        // L·∫•y thay ƒë·ªïi gi√° t·ª´ header m·ªõi
                        const priceChangeElement = document.querySelector('div.sticky.z-50.mb-1.bg-white span');
                        if (priceChangeElement && priceChangeElement.style.color) {
                            data.price_change = priceChangeElement.textContent.trim();
                        } else {
                            // Fallback cho c√°c selector c≈©
                            const priceChange = document.querySelector('.price-change, .change, [data-change], .stock-change');
                            data.price_change = priceChange ? priceChange.textContent.trim() : 'N/A';
                        }
                        
                        // L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng t√†i ch√≠nh
                        const table = document.querySelector('table tbody');
                        if (table) {
                            const rows = table.querySelectorAll('tr');
                            rows.forEach(row => {
                                const cells = row.querySelectorAll('td');
                                if (cells.length >= 2) {
                                    const label = cells[0].textContent.trim();
                                    const value = cells[1].textContent.trim();
                                    
                                    switch(label) {
                                        case 'Tham chi·∫øu':
                                            data.reference_price = value;
                                            break;
                                        case 'M·ªü c·ª≠a':
                                            data.open_price = value;
                                            break;
                                        case 'Th·∫•p - Cao':
                                            data.low_high = value;
                                            break;
                                        case 'Kh·ªëi l∆∞·ª£ng':
                                            data.volume = value;
                                            break;
                                        case 'Gi√° tr·ªã':
                                            data.value = value;
                                            break;
                                        case 'KLTB 10 ng√†y':
                                            data.avg_volume_10d = value;
                                            break;
                                        case 'Beta':
                                            data.beta = value;
                                            break;
                                        case 'Th·ªã gi√° v·ªën':
                                            data.market_cap = value;
                                            break;
                                        case 'S·ªë l∆∞·ª£ng CPLH':
                                            data.outstanding_shares = value;
                                            break;
                                        case 'P/E':
                                            data.pe_ratio = value;
                                            break;
                                        case 'EPS':
                                            data.eps = value;
                                            break;
                                    }
                                }
                            });
                        }
                        
                        return data;
                    }
                """)
                print('stock_data', stock_data)
                                
                # S·ª≠ d·ª•ng c∆° ch·∫ø scroll th√¥ng minh cho trang ch√≠nh
                screenshot_filepath = await self._smart_scroll_and_capture(page, symbol, "general")
                
                # B∆∞·ªõc 2: Click v√†o tab "T√†i ch√≠nh" v√† ch·ª•p ·∫£nh chart
                financial_screenshot, financial_success = await self._click_financial_tab_and_capture(page, symbol)
                
                # B∆∞·ªõc 3: Ph√¢n t√≠ch chart v·ªõi OpenAI n·∫øu ch·ª•p ·∫£nh th√†nh c√¥ng
                financial_analysis = None
                if financial_success and financial_screenshot:
                    with st.spinner("ü§ñ ƒêang ph√¢n t√≠ch chart..."):
                        # S·ª≠ d·ª•ng DoclingProcessor ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin v√† t·∫°o b√°o c√°o markdown
                        docling = DoclingProcessor()
                        result = docling.process_screenshot(financial_screenshot, symbol)
                        financial_analysis = result.get('markdown_structure')
    
                
                await browser.close()
                
                return {
                    'symbol': symbol,
                    'symbol_code': stock_data.get('symbol_code', symbol),
                    'exchange': stock_data.get('exchange', 'N/A'),
                    'company_name': stock_data.get('company_name', 'Kh√¥ng t√¨m th·∫•y'),
                    'current_price': stock_data.get('current_price', 'N/A'),
                    'price_change': stock_data.get('price_change', 'N/A'),
                    'reference_price': stock_data.get('reference_price', 'N/A'),
                    'open_price': stock_data.get('open_price', 'N/A'),
                    'low_high': stock_data.get('low_high', 'N/A'),
                    'volume': stock_data.get('volume', 'N/A'),
                    'value': stock_data.get('value', 'N/A'),
                    'avg_volume_10d': stock_data.get('avg_volume_10d', 'N/A'),
                    'beta': stock_data.get('beta', 'N/A'),
                    'market_cap': stock_data.get('market_cap', 'N/A'),
                    'outstanding_shares': stock_data.get('outstanding_shares', 'N/A'),
                    'pe_ratio': stock_data.get('pe_ratio', 'N/A'),
                    'eps': stock_data.get('eps', 'N/A'),
                    'url': url,
                    'screenshot_filepath': screenshot_filepath,
                    'financial_screenshot': financial_screenshot,
                    'financial_analysis': financial_analysis,
                    'financial_success': financial_success,
                }
                
        except Exception as e:
            st.error(f"L·ªói khi s·ª≠ d·ª•ng Browserless: {str(e)}")
            return None
    
    def save_screenshots(self, screenshot, symbol, page_type="general"):
        """
        L∆∞u screenshot v√†o th∆∞ m·ª•c v√† tr√≠ch xu·∫•t b√°o c√°o markdown b·∫±ng Docling
        
        Args:
            screenshot: Screenshot data
            symbol: M√£ ch·ª©ng kho√°n
            page_type: Lo·∫°i trang
        """
        import os
        from datetime import datetime
        import streamlit as st
        
        # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        save_dir = f"{self.screenshots_dir}/{symbol}_{page_type}_{timestamp}"
        os.makedirs(save_dir, exist_ok=True)
        
        filename = f"{save_dir}/screenshot.png"
        with open(filename, "wb") as f:
            f.write(screenshot)

        return filename
    
    def display_screenshots(self, screenshot, symbol, page_type="general"):
        """
        Hi·ªÉn th·ªã screenshot trong Streamlit
        
        Args:
            screenshot: Screenshot data
            symbol: M√£ ch·ª©ng kho√°n
            page_type: Lo·∫°i trang
        """
        import streamlit as st
        
        st.subheader(f"üì∏ Screenshot - {symbol} ({page_type})")
        st.image(screenshot, caption=f"Screenshot - {symbol}", use_column_width=True)
        st.info("üñºÔ∏è Screenshot to√†n trang - hi·ªÉn th·ªã t·∫•t c·∫£ n·ªôi dung ƒë√£ ƒë∆∞·ª£c scroll v√† load ƒë·∫ßy ƒë·ªß")


async def demo_scroll_capture():
    """Demo c∆° ch·∫ø scroll, ch·ª•p ·∫£nh v√† ph√¢n t√≠ch chart v·ªõi OpenAI"""
    import streamlit as st
    
    st.title("üöÄ Demo Scraping v√† Ph√¢n t√≠ch Chart v·ªõi OpenAI")
    st.write("Test c∆° ch·∫ø scroll, ch·ª•p ·∫£nh v√† ph√¢n t√≠ch chart t·ª± ƒë·ªông v·ªõi AI")
    
    # T·∫°o scraper
    scraper = FireantBrowserlessScraper()
    
    # Ki·ªÉm tra c·∫•u h√¨nh
    # config_status = scraper.check_configuration() # This line is removed
    
    # N√∫t t·∫°o file .env
    if st.button("üìù T·∫°o file .env"):
        scraper.create_env_file()
    
    # Input m√£ ch·ª©ng kho√°n
    symbol = st.text_input("Nh·∫≠p m√£ ch·ª©ng kho√°n:", value="TCB")
    
    if st.button("üîç Test Scroll v√† Ch·ª•p ·∫¢nh"):
        if symbol:
            with st.spinner("ƒêang test c∆° ch·∫ø scroll v√† ch·ª•p ·∫£nh..."):
                try:
                    # Test trang th√¥ng tin c∆° b·∫£n
                    st.subheader("üìä Test Trang Th√¥ng Tin C∆° B·∫£n")
                    result = await scraper.get_stock_info_browserless(symbol)
                    
                    if result and 'screenshot_filepath' in result:
                        st.success(f"‚úÖ ƒê√£ ch·ª•p ƒë∆∞·ª£c screenshot v√† ph√¢n t√≠ch chart")
                        
                        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**M√£ CK:** {result['symbol_code']}")
                            st.write(f"**S√†n:** {result['exchange']}")
                            st.write(f"**T√™n c√¥ng ty:** {result['company_name']}")
                            st.write(f"**Gi√° hi·ªán t·∫°i:** {result['current_price']}")
                        with col2:
                            st.write(f"**Thay ƒë·ªïi:** {result['price_change']}")
                            st.write(f"**Kh·ªëi l∆∞·ª£ng:** {result['volume']}")
                            st.write(f"**Tham chi·∫øu:** {result['reference_price']}")
                            st.write(f"**URL:** {result['url']}")
                        
                        # Hi·ªÉn th·ªã th√¥ng tin file screenshot
                        st.info(f"üìÅ Screenshot ƒë√£ l∆∞u t·∫°i: {result['screenshot_filepath']}")
                        
                        # Hi·ªÉn th·ªã screenshot trang ch√≠nh n·∫øu file t·ªìn t·∫°i
                        if result['screenshot_filepath'] and os.path.exists(result['screenshot_filepath']):
                            with open(result['screenshot_filepath'], "rb") as f:
                                screenshot_data = f.read()
                            scraper.display_screenshots(screenshot_data, symbol, "general")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch chart
                        if result.get('financial_success') and result.get('financial_screenshot'):
                            st.subheader("üìä Screenshot Tab T√†i ch√≠nh")
                            scraper.display_screenshots(result['financial_screenshot'], symbol, "financial")
                        
                        # L∆∞u screenshot v√† hi·ªÉn th·ªã b√°o c√°o markdown t·ª´ Docling
                        if st.button("üíæ L∆∞u Screenshot"):
                            if result['screenshot_filepath'] and os.path.exists(result['screenshot_filepath']):
                                with open(result['screenshot_filepath'], "rb") as f:
                                    screenshot_data = f.read()
                                saved_file = scraper.save_screenshots(screenshot_data, symbol, "general")
                                st.success(f"‚úÖ ƒê√£ l∆∞u screenshot: {saved_file}")
                                markdown_path = os.path.join(os.path.dirname(saved_file), "report.md")
                                if os.path.exists(markdown_path):
                                    with open(markdown_path, "r", encoding="utf-8") as f:
                                        markdown_content = f.read()
                                    st.subheader("üìÑ B√°o c√°o t√†i ch√≠nh (Docling)")
                                    st.markdown(markdown_content)
                                else:
                                    st.info("Kh√¥ng t√¨m th·∫•y file b√°o c√°o markdown t·ª´ Docling.")
                            else:
                                st.error("‚ùå Kh√¥ng t√¨m th·∫•y file screenshot ƒë·ªÉ l∆∞u")
                    
                except Exception as e:
                    st.error(f"‚ùå L·ªói: {str(e)}")
                    st.exception(e)

if __name__ == "__main__":
    asyncio.run(demo_scroll_capture()) 